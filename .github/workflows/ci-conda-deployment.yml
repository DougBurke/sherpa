name: Conda Deployments

#Only run for main and ciaox branches if not a directly tagged build
#Only run for the release branch on the tag (must be #.##.# tag only)
#reduce duplication
on:
  push:
    branches:
    - main
    - ciaox
    - 'releases/**'
    - gh-deployments

#Reduces GH Action duplication:
# Cancels the previous pipeline for this ref it is still running
concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true

#Temporarily upload this to my channel for testing
env:
  sherpa_channel: Marie-Terrell
  sherpa_label: dev
  miniconda_loc: ${{ github.workspace }}/miniconda
  CONDA_BUILD_SYSROOT: /opt/MacOSX10.9.sdk

defaults:
  run:
    shell: bash

jobs:
  build-linux:
    name: Linux Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
      env:
        GITHUB_WORKSPACE: ${{ github.workspace }}
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }}
    strategy:
      matrix:
        image: ["redhat/ubi8"]
        conda-os: ["Linux-x86_64"]
        python-version: ["3.8", "3.9", "3.10"]
          
    steps:
    - name: Install git and diff
      run: yum install -y -q git diffutils

    - name: Conda Setup
      env:
        CONDA_OS: ${{ matrix.conda-os }}
      run: |
        curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-${CONDA_OS}.sh -o miniconda.sh
        bash miniconda.sh -b -p ${miniconda_loc}
        source ${miniconda_loc}/etc/profile.d/conda.sh
        conda create -yq -n builder conda-build conda-verify

    #Checkout the code with a depth of 0 to grab the tags/branches as well
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: sherpa

    - name: Build Sherpa
      env:
        SHERPA_PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        cd sherpa
        export SHERPA_FULL_VERSION=$(git describe --tags --always)
        export SHERPA_VERSION=$(echo $SHERPA_FULL_VERSION | awk '{split($0,a,"-"); print a[1]}')
        export SHERPA_BUILD_NUMBER=$(echo $SHERPA_FULL_VERSION | awk '{split($0,a,"-"); print a[2]}')
        echo "Version: ${SHERPA_VERSION} Build Number: ${SHERPA_BUILD_NUMBER}"
        if [ -z ${SHERPA_VERSION} ] || [ -z ${SHERPA_BUILD_NUMBER} ] ; then
          echo "Error: SHERPA_VERSION or SHERPA_BUILD_NUMBER not set"
          exit 1
        fi
        source ${miniconda_loc}/etc/profile.d/conda.sh
        conda activate builder
        echo "conda build --python ${SHERPA_PYTHON_VERSION} --output-folder ${GITHUB_WORKSPACE}/packages recipes/conda"
        conda build --python ${SHERPA_PYTHON_VERSION} --output-folder ${GITHUB_WORKSPACE}/packages recipes/conda

    - uses: actions/upload-artifact@v3
      with:
        path: ${GITHUB_WORKSPACE}/packages
        if-no-files-found: error
        retention-days: 3

  build-macos:
    name: MacOS Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os-type }}
    strategy:
      matrix:
        os-type: ["macos-10.15"]
        conda-os: ["MacOSX-x86_64"]
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - name: Conda Setup
      env:
        CONDA_OS: ${{ matrix.conda-os }}
      run: |
        curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-${CONDA_OS}.sh -o miniconda.sh
        bash miniconda.sh -b -p ${miniconda_loc}
        source ${miniconda_loc}/etc/profile.d/conda.sh
        conda create -yq -n builder conda-build conda-verify

    - name: macOS 10.9 SDK
      if: ${{ matrix.conda-os == 'MacOSX-x86_64' }}
      run: |
        #Download the MacOS 10.9 SDK to the CONDA_BUILD_SYSROOT location for the Conda Compilers to work
        mkdir -p /opt
        curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.9.sdk.tar.xz -o MacOSX10.9.sdk.tar.xz
        if [[ $? -ne 0 ]]; then
            echo "MacOS 10.9 SDK download failed"
        fi
        sudo tar -C /opt -xf MacOSX10.9.sdk.tar.xz

    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: sherpa

    - name: Build Sherpa
      env:
        SHERPA_PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        cd sherpa
        export SHERPA_FULL_VERSION=$(git describe --tags --always)
        export SHERPA_VERSION=$(echo $SHERPA_FULL_VERSION | awk '{split($0,a,"-"); print a[1]}')
        export SHERPA_BUILD_NUMBER=$(echo $SHERPA_FULL_VERSION | awk '{split($0,a,"-"); print a[2]}')
        echo "Version: ${SHERPA_VERSION} Build Number: ${SHERPA_BUILD_NUMBER}"
        if [ -z ${SHERPA_VERSION} ] || [ -z ${SHERPA_BUILD_NUMBER} ] ; then
          echo "Error: SHERPA_VERSION or SHERPA_BUILD_NUMBER not set"
          exit 1
        fi
        source ${miniconda_loc}/etc/profile.d/conda.sh
        conda activate builder
        echo "conda build --python ${SHERPA_PYTHON_VERSION} --output-folder ${GITHUB_WORKSPACE}/packages recipes/conda"
        conda build --python ${SHERPA_PYTHON_VERSION} --output-folder ${GITHUB_WORKSPACE}/packages recipes/conda

    - uses: actions/upload-artifact@v3
      with:
        path: ${GITHUB_WORKSPACE}/packages
        if-no-files-found: error
        retention-days: 3

  pre-deploy-test:
    needs: [build-linux, build-macos]
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Latest Ubuntu Pre-Deploy Test
            os: ubuntu-latest
            conda-os: "Linux-x86_64"
          - name: Latest MacOS Pre-Deploy Test
            os: macos-latest
            conda-os: "MacOSX-x86_64"

    steps:
    #Download all artifacts
    - uses: actions/download-artifact@v3

    - name: Conda Setup & Index Artifacts
      env:
        CONDA_OS: ${{ matrix.conda-os }}
      run: |
        curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-${CONDA_OS}.sh -o miniconda.sh
        bash miniconda.sh -b -p ${miniconda_loc}
        source ${miniconda_loc}/etc/profile.d/conda.sh
        conda install conda-build
        conda index packages

    - name: Run the tests
      run: |
        source ${miniconda_loc}/etc/profile.d/conda.sh
        curl -LO -k https://github.com/sherpa/sherpa-test-data/archive/main.zip 
        conda create -n test38 --yes -q -c file://$(pwd)/packages python=3.8 astropy sherpa matplotlib
        conda activate test38
        pip install main.zip
        sherpa_smoke -f astropy
        sherpa_test
        conda create -n test39 --yes -q -c file://$(pwd)/packages python=3.9 astropy sherpa matplotlib
        conda activate test39
        pip install main.zip
        sherpa_smoke -f astropy
        sherpa_test
        conda create -n test310 --yes -q -c file://$(pwd)/packages python=3.10 astropy sherpa matplotlib
        conda activate test310
        pip install main.zip
        sherpa_smoke -f astropy
        sherpa_test

  deploy:
    needs: pre-deploy-test
    name: Deploy to Dev Channel
    runs-on: ubuntu-latest
    #Do NOT auto cancel the GH Action run during the deploy stage
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: false

    steps:
    #Download all artifacts
    - uses: actions/download-artifact@v3

    - name: Anaconda-Client Setup
      run: |
        curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
        bash miniconda.sh -b -p ${miniconda_loc}
        source ${miniconda_loc}/etc/profile.d/conda.sh
        conda install -yq anaconda-client
      
    - name: Deploy Sherpa
      env:
        CONDA_UPLOAD_TOKEN: ${{ secrets.CONDA_UPLOAD_TOKEN }}
      run: |
        source ${miniconda_loc}/etc/profile.d/conda.sh
        conda activate
        if [ -z ${CONDA_UPLOAD_TOKEN} ] || [ -z ${sherpa_channel} ]; then
          echo "Error: CONDA_UPLOAD_TOKEN or sherpa_channel is not set."
          exit 1
        fi
        #We can switch this to use "--force" if we run into issues with the upload cutting or needing to re-run
        anaconda -t ${CONDA_UPLOAD_TOKEN} upload -u ${sherpa_channel} -l ${sherpa_label} packages/linux-64/sherpa*
        anaconda -t ${CONDA_UPLOAD_TOKEN} upload -u ${sherpa_channel} -l ${sherpa_label} packages/osx-64/sherpa*
